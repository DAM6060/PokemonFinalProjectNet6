// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PokemonFinalProjectNet6.Data;

#nullable disable

namespace PokemonFinalProjectNet6.Infrastructure.Migrations
{
    [DbContext(typeof(PokemonDbContext))]
    partial class PokemonDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "78394649-2eef-4730-91a6-5af840819de4",
                            Email = "varnasharks.afc@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VARNASHARKS.AFC@GMAIL.COM",
                            NormalizedUserName = "DIMITARPLAYER@PLAYER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECctuq3cROcKuyZIv5DeCX/TZPiXSOuKfZe2vpQmnHR5WKzQBnpI5Ktyyp7ZG4OnKw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c447e361-004c-4ad9-aa38-3f1e1c79fbe5",
                            TwoFactorEnabled = false,
                            UserName = "DimitarPlayer@player.com"
                        },
                        new
                        {
                            Id = "dea12856-c198-4129-b3f3-b893d8395082",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bc4b0fed-e751-4968-8bd6-a6ef830ecb3f",
                            Email = "ddimitar98@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DDIMITAR98@GMAIL.COM",
                            NormalizedUserName = "DIMITARADMIN@ADMIN.COm",
                            PasswordHash = "AQAAAAEAACcQAAAAECiXpByNfG+Q0r7063hvgIMn1tPsh/lzBS6mpnVJVB/X+HeMPM07awauiVoDgS8WZA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "adf2b980-7f1d-45fe-9eb4-abad20e5afc1",
                            TwoFactorEnabled = false,
                            UserName = "DimitarAdmin@admin.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PokemonFinalProjectNet6.Infrastructure.Data.Models.Ability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhaseOfCombatActivaton")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Abilities");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Description = "Powers up punching moves.",
                            Name = "Iron Fist",
                            PhaseOfCombatActivaton = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "Powers up moves of the same type.",
                            Name = "Adaptability",
                            PhaseOfCombatActivaton = 3
                        },
                        new
                        {
                            Id = 1,
                            Description = "Boosts the Pokémon's Speed stat in harsh sunlight.",
                            Name = "Chlorophyll",
                            PhaseOfCombatActivaton = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Powers up the Pokémon's weaker moves.",
                            Name = "Technician",
                            PhaseOfCombatActivaton = 3
                        });
                });

            modelBuilder.Entity("PokemonFinalProjectNet6.Infrastructure.Data.Models.Lobby", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("Lobbies");
                });

            modelBuilder.Entity("PokemonFinalProjectNet6.Infrastructure.Data.Models.Move", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identifier of a move");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Accuracy")
                        .HasColumnType("int")
                        .HasComment("Accuracy of a move");

                    b.Property<string>("Ailment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Ailment that attack may induce");

                    b.Property<int>("AilmentChance")
                        .HasColumnType("int")
                        .HasComment("Chance of ailment being induced");

                    b.Property<int>("DamageClass")
                        .HasColumnType("int")
                        .HasComment("Physical Special or Status");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Name of additional effect");

                    b.Property<int>("EffectChance")
                        .HasColumnType("int")
                        .HasComment("Chance of additional effect");

                    b.Property<int>("EffectDuration")
                        .HasColumnType("int");

                    b.Property<int>("HealAmount")
                        .HasColumnType("int")
                        .HasComment("The percent of heath Restored Based on damage or userHealt");

                    b.Property<int>("HealType")
                        .HasColumnType("int")
                        .HasComment("If the heal is based on own Hp or DamageDelt");

                    b.Property<bool?>("IsEffectUser")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Power")
                        .HasColumnType("int")
                        .HasComment("Attack power of a move");

                    b.Property<int>("PowerPoints")
                        .HasColumnType("int")
                        .HasComment("How many times a use can be used in battle");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Type of a move");

                    b.HasKey("Id");

                    b.ToTable("Moves");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            Accuracy = 100,
                            Ailment = "",
                            AilmentChance = 0,
                            DamageClass = 1,
                            Description = "In this two-turn attack, the user gathers light, then blasts a bundled beam on the next turn.",
                            Effect = "",
                            EffectChance = 0,
                            EffectDuration = 0,
                            HealAmount = 0,
                            HealType = 0,
                            Name = "Solar Beam",
                            Power = 120,
                            PowerPoints = 10,
                            Priority = 0,
                            Type = "Grass"
                        },
                        new
                        {
                            Id = 19,
                            Accuracy = 100,
                            Ailment = "Poison",
                            AilmentChance = 30,
                            DamageClass = 1,
                            Description = "Unsanitary sludge is hurled at the target. This may also poison the target.",
                            Effect = "",
                            EffectChance = 0,
                            EffectDuration = 0,
                            HealAmount = 0,
                            HealType = 0,
                            Name = "Sludge Bomb",
                            Power = 90,
                            PowerPoints = 10,
                            Priority = 0,
                            Type = "Poison"
                        },
                        new
                        {
                            Id = 4,
                            Accuracy = 75,
                            Ailment = "Sleep",
                            AilmentChance = 100,
                            DamageClass = 2,
                            Description = "The user scatters a big cloud of sleep-inducing dust around the target.",
                            Effect = "",
                            EffectChance = 0,
                            EffectDuration = 0,
                            HealAmount = 0,
                            HealType = 0,
                            Name = "Sleep Powder",
                            Power = 0,
                            PowerPoints = 15,
                            Priority = 0,
                            Type = "Grass"
                        },
                        new
                        {
                            Id = 12,
                            Accuracy = 100,
                            Ailment = "",
                            AilmentChance = 0,
                            DamageClass = 0,
                            Description = "The user attacks the target with great power. However, this also lowers the user's Attack and Defense stats.",
                            Effect = "Lower Attack and Defense",
                            EffectChance = 100,
                            EffectDuration = 0,
                            HealAmount = 0,
                            HealType = 0,
                            IsEffectUser = true,
                            Name = "Super Power",
                            Power = 120,
                            PowerPoints = 5,
                            Priority = 0,
                            Type = "Fighting"
                        },
                        new
                        {
                            Id = 1,
                            Accuracy = 100,
                            Ailment = "Burn",
                            AilmentChance = 10,
                            DamageClass = 1,
                            Description = "The target is scorched with an intense blast of fire. This may also leave the target with a burn.",
                            Effect = "",
                            EffectChance = 0,
                            EffectDuration = 0,
                            HealAmount = 0,
                            HealType = 0,
                            Name = "Flame Thrower",
                            Power = 90,
                            PowerPoints = 15,
                            Priority = 0,
                            Type = "Fire"
                        },
                        new
                        {
                            Id = 2,
                            Accuracy = 100,
                            Ailment = "Paralysis",
                            AilmentChance = 10,
                            DamageClass = 0,
                            Description = "The target is punched with an electrified fist. This may also leave the target with paralysis.",
                            Effect = "",
                            EffectChance = 0,
                            EffectDuration = 0,
                            HealAmount = 0,
                            HealType = 0,
                            Name = "Thunder Punch",
                            Power = 75,
                            PowerPoints = 15,
                            Priority = 0,
                            Type = "Electric"
                        },
                        new
                        {
                            Id = 3,
                            Accuracy = 100,
                            Ailment = "",
                            AilmentChance = 0,
                            DamageClass = 1,
                            Description = "A nutrient-draining attack. The user's HP is restored by half the damage taken by the target.",
                            Effect = "Heal",
                            EffectChance = 100,
                            EffectDuration = 0,
                            HealAmount = 50,
                            HealType = 2,
                            IsEffectUser = true,
                            Name = "Giga Drain",
                            Power = 75,
                            PowerPoints = 10,
                            Priority = 0,
                            Type = "Grass"
                        },
                        new
                        {
                            Id = 18,
                            Accuracy = 100,
                            Ailment = "",
                            AilmentChance = 0,
                            DamageClass = 0,
                            Description = "The user attacks with a swift chop. It can also break barriers, such as Light Screen and Reflect.",
                            Effect = "Breaks Light Screen and Reflect",
                            EffectChance = 100,
                            EffectDuration = 0,
                            HealAmount = 0,
                            HealType = 0,
                            IsEffectUser = false,
                            Name = "Brick Break",
                            Power = 75,
                            PowerPoints = 15,
                            Priority = 0,
                            Type = "Fighting"
                        },
                        new
                        {
                            Id = 7,
                            Accuracy = 100,
                            Ailment = "",
                            AilmentChance = 0,
                            DamageClass = 0,
                            Description = "The target is struck with large, imposing wings spread wide to inflict damage.",
                            Effect = "",
                            EffectChance = 0,
                            EffectDuration = 0,
                            HealAmount = 0,
                            HealType = 0,
                            Name = "Wing Attack",
                            Power = 60,
                            PowerPoints = 35,
                            Priority = 0,
                            Type = "Flying"
                        },
                        new
                        {
                            Id = 8,
                            Accuracy = 100,
                            Ailment = "",
                            AilmentChance = 0,
                            DamageClass = 0,
                            Description = "The user bites the target. If the target is holding a Berry, the user eats it and gains its effect.",
                            Effect = "",
                            EffectChance = 0,
                            EffectDuration = 0,
                            HealAmount = 0,
                            HealType = 0,
                            Name = "Bug Bite",
                            Power = 60,
                            PowerPoints = 20,
                            Priority = 0,
                            Type = "Bug"
                        },
                        new
                        {
                            Id = 10,
                            Accuracy = 100,
                            Ailment = "",
                            AilmentChance = 0,
                            DamageClass = 0,
                            Description = "The user fights the target up close without guarding itself. This also lowers the user's Defense and Sp. Def stats.",
                            Effect = "Lower Def and SpDef",
                            EffectChance = 0,
                            EffectDuration = 0,
                            HealAmount = 0,
                            HealType = 0,
                            IsEffectUser = true,
                            Name = "Close Combat",
                            Power = 120,
                            PowerPoints = 5,
                            Priority = 0,
                            Type = "Fighting"
                        },
                        new
                        {
                            Id = 13,
                            Accuracy = 100,
                            Ailment = "",
                            AilmentChance = 0,
                            DamageClass = 1,
                            Description = "The user makes the ground under the target erupt with power. This may also lower the target's Sp. Def stat.",
                            Effect = "Lower SpDef",
                            EffectChance = 10,
                            EffectDuration = 0,
                            HealAmount = 0,
                            HealType = 0,
                            IsEffectUser = false,
                            Name = "Earth Power",
                            Power = 90,
                            PowerPoints = 10,
                            Priority = 0,
                            Type = "Ground"
                        },
                        new
                        {
                            Id = 17,
                            Accuracy = 100,
                            Ailment = "Burn",
                            AilmentChance = 10,
                            DamageClass = 0,
                            Description = "The target is punched with a fiery fist. This may also leave the target with a burn.",
                            Effect = "",
                            EffectChance = 0,
                            EffectDuration = 0,
                            HealAmount = 0,
                            HealType = 0,
                            Name = "Fire Punch",
                            Power = 75,
                            PowerPoints = 15,
                            Priority = 0,
                            Type = "Fire"
                        },
                        new
                        {
                            Id = 9,
                            Accuracy = 100,
                            Ailment = "",
                            AilmentChance = 0,
                            DamageClass = 0,
                            Description = "After making its attack, the user rushes back to switch places with a party Pokémon in waiting.",
                            Effect = "Force Switch",
                            EffectChance = 100,
                            EffectDuration = 0,
                            HealAmount = 0,
                            HealType = 0,
                            IsEffectUser = true,
                            Name = "U-Turn",
                            Power = 70,
                            PowerPoints = 20,
                            Priority = 0,
                            Type = "Bug"
                        },
                        new
                        {
                            Id = 16,
                            Accuracy = 100,
                            Ailment = "Freeze",
                            AilmentChance = 10,
                            DamageClass = 1,
                            Description = "The target is struck with an icy-cold beam of energy. This may also leave the target frozen.",
                            Effect = "",
                            EffectChance = 0,
                            EffectDuration = 0,
                            HealAmount = 0,
                            HealType = 0,
                            Name = "Ice Beam",
                            Power = 90,
                            PowerPoints = 10,
                            Priority = 0,
                            Type = "Ice"
                        },
                        new
                        {
                            Id = 14,
                            Accuracy = 90,
                            Ailment = "",
                            AilmentChance = 0,
                            DamageClass = 0,
                            Description = "Large boulders are hurled at the opposing Pokémon to inflict damage. This may also make the opposing Pokémon flinch.",
                            Effect = "Flinch",
                            EffectChance = 30,
                            EffectDuration = 0,
                            HealAmount = 0,
                            HealType = 0,
                            IsEffectUser = false,
                            Name = "Rock Slide",
                            Power = 75,
                            PowerPoints = 10,
                            Priority = 0,
                            Type = "Rock"
                        },
                        new
                        {
                            Id = 15,
                            Accuracy = 100,
                            Ailment = "",
                            AilmentChance = 0,
                            DamageClass = 0,
                            Description = "The user crunches up the target with sharp fangs. This may also lower the target's Sp. Def stat.",
                            Effect = "Lower SpDef",
                            EffectChance = 20,
                            EffectDuration = 0,
                            HealAmount = 0,
                            HealType = 0,
                            IsEffectUser = false,
                            Name = "Crunch",
                            Power = 80,
                            PowerPoints = 15,
                            Priority = 0,
                            Type = "Dark"
                        },
                        new
                        {
                            Id = 11,
                            Accuracy = 100,
                            Ailment = "",
                            AilmentChance = 0,
                            DamageClass = 0,
                            Description = "The user strikes the target with tough punches as fast as bullets.",
                            Effect = "",
                            EffectChance = 0,
                            EffectDuration = 0,
                            HealAmount = 0,
                            HealType = 0,
                            Name = "Bullet Punch",
                            Power = 40,
                            PowerPoints = 30,
                            Priority = 1,
                            Type = "Steel"
                        },
                        new
                        {
                            Id = 20,
                            Accuracy = 0,
                            Ailment = "",
                            AilmentChance = 0,
                            DamageClass = 2,
                            Description = "A wondrous wall of light is put up to reduce damage from physical attacks for five turns.",
                            Effect = "Doubles Defense",
                            EffectChance = 100,
                            EffectDuration = 5,
                            HealAmount = 0,
                            HealType = 0,
                            IsEffectUser = true,
                            Name = "Reflect",
                            Power = 0,
                            PowerPoints = 20,
                            Priority = 0,
                            Type = "Psychic"
                        },
                        new
                        {
                            Id = 21,
                            Accuracy = 90,
                            Ailment = "Seeded",
                            AilmentChance = 100,
                            DamageClass = 2,
                            Description = "A seed is planted on the target. It steals some HP from the target every turn.",
                            Effect = "Drain HP",
                            EffectChance = 100,
                            EffectDuration = 0,
                            HealAmount = 12,
                            HealType = 2,
                            IsEffectUser = false,
                            Name = "Leech Seed",
                            Power = 0,
                            PowerPoints = 10,
                            Priority = 0,
                            Type = "Grass"
                        },
                        new
                        {
                            Id = 6,
                            Accuracy = 100,
                            Ailment = "",
                            AilmentChance = 0,
                            DamageClass = 0,
                            Description = "The user sets off an earthquake that strikes every Pokémon around it.",
                            Effect = "",
                            EffectChance = 0,
                            EffectDuration = 0,
                            HealAmount = 0,
                            HealType = 0,
                            Name = "Earthquake",
                            Power = 100,
                            PowerPoints = 10,
                            Priority = 0,
                            Type = "Ground"
                        });
                });

            modelBuilder.Entity("PokemonFinalProjectNet6.Infrastructure.Data.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("LobbyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LobbyId");

                    b.HasIndex("UserId");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dimitrakis",
                            UserId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dimetros",
                            UserId = "dea12856-c198-4129-b3f3-b893d8395082"
                        });
                });

            modelBuilder.Entity("PokemonFinalProjectNet6.Infrastructure.Data.Models.Pokemon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AbilityId")
                        .HasColumnType("int");

                    b.Property<int>("Attack")
                        .HasColumnType("int")
                        .HasComment("Actual Attack");

                    b.Property<int>("BaseAttack")
                        .HasColumnType("int");

                    b.Property<int>("BaseDefense")
                        .HasColumnType("int");

                    b.Property<int>("BaseHP")
                        .HasColumnType("int");

                    b.Property<int>("BaseSpecialAttack")
                        .HasColumnType("int");

                    b.Property<int>("BaseSpecialDefense")
                        .HasColumnType("int");

                    b.Property<int>("BaseSpeed")
                        .HasColumnType("int");

                    b.Property<int>("Defense")
                        .HasColumnType("int")
                        .HasComment("Actual Defense");

                    b.Property<int>("EvAttack")
                        .HasColumnType("int")
                        .HasComment("Effort values for attack set by player upon creation. Starting Value set to 0");

                    b.Property<int>("EvDefence")
                        .HasColumnType("int")
                        .HasComment("Effort values for defence set by player upon creation. Starting Value set to 0");

                    b.Property<int>("EvHP")
                        .HasColumnType("int")
                        .HasComment("Effort values for health points set by player upon creation. Starting Value set to 0");

                    b.Property<int>("EvSpecialAttack")
                        .HasColumnType("int")
                        .HasComment("Effort values for Speacial Attack set by player upon creation. Starting Value set to 0");

                    b.Property<int>("EvSpecialDefense")
                        .HasColumnType("int")
                        .HasComment("Effort values for Speacial Defeense set by player upon creation. Starting Value set to 0");

                    b.Property<int>("EvSpeed")
                        .HasColumnType("int")
                        .HasComment("Effort values for Speed set by player upon creation. Starting Value set to 0");

                    b.Property<int>("HP")
                        .HasColumnType("int")
                        .HasComment("Actual HP");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int")
                        .HasComment("Team Identifier");

                    b.Property<int>("SpecialAttack")
                        .HasColumnType("int")
                        .HasComment("Actual Special Attack");

                    b.Property<int>("SpecialDefense")
                        .HasColumnType("int")
                        .HasComment("Actual Special Defense");

                    b.Property<int>("Speed")
                        .HasColumnType("int")
                        .HasComment("Actual Speed");

                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasComment("Team Identifier");

                    b.Property<int>("Type1")
                        .HasColumnType("int")
                        .HasComment("The primary type of a pokemon");

                    b.Property<int>("Type2")
                        .HasColumnType("int")
                        .HasComment("The secondary type of a pokemon");

                    b.HasKey("Id");

                    b.HasIndex("AbilityId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("Pokemons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AbilityId = 1,
                            Attack = 82,
                            BaseAttack = 82,
                            BaseDefense = 83,
                            BaseHP = 80,
                            BaseSpecialAttack = 100,
                            BaseSpecialDefense = 100,
                            BaseSpeed = 80,
                            Defense = 83,
                            EvAttack = 0,
                            EvDefence = 0,
                            EvHP = 0,
                            EvSpecialAttack = 0,
                            EvSpecialDefense = 4,
                            EvSpeed = 0,
                            HP = 80,
                            Level = 50,
                            Name = "Venusaur",
                            PlayerId = 1,
                            SpecialAttack = 100,
                            SpecialDefense = 100,
                            Speed = 80,
                            TeamId = 1,
                            Type1 = 4,
                            Type2 = 8
                        },
                        new
                        {
                            Id = 6,
                            AbilityId = 1,
                            Attack = 82,
                            BaseAttack = 82,
                            BaseDefense = 83,
                            BaseHP = 80,
                            BaseSpecialAttack = 100,
                            BaseSpecialDefense = 100,
                            BaseSpeed = 80,
                            Defense = 83,
                            EvAttack = 0,
                            EvDefence = 0,
                            EvHP = 0,
                            EvSpecialAttack = 0,
                            EvSpecialDefense = 0,
                            EvSpeed = 0,
                            HP = 80,
                            Level = 50,
                            Name = "Venusaur",
                            PlayerId = 1,
                            SpecialAttack = 100,
                            SpecialDefense = 100,
                            Speed = 80,
                            TeamId = 2,
                            Type1 = 4,
                            Type2 = 8
                        },
                        new
                        {
                            Id = 2,
                            AbilityId = 2,
                            Attack = 104,
                            BaseAttack = 104,
                            BaseDefense = 71,
                            BaseHP = 76,
                            BaseSpecialAttack = 104,
                            BaseSpecialDefense = 71,
                            BaseSpeed = 108,
                            Defense = 71,
                            EvAttack = 0,
                            EvDefence = 0,
                            EvHP = 0,
                            EvSpecialAttack = 0,
                            EvSpecialDefense = 0,
                            EvSpeed = 0,
                            HP = 76,
                            Level = 50,
                            Name = "Infernape",
                            PlayerId = 1,
                            SpecialAttack = 104,
                            SpecialDefense = 71,
                            Speed = 108,
                            TeamId = 1,
                            Type1 = 2,
                            Type2 = 7
                        },
                        new
                        {
                            Id = 5,
                            AbilityId = 2,
                            Attack = 104,
                            BaseAttack = 104,
                            BaseDefense = 71,
                            BaseHP = 76,
                            BaseSpecialAttack = 104,
                            BaseSpecialDefense = 71,
                            BaseSpeed = 108,
                            Defense = 71,
                            EvAttack = 0,
                            EvDefence = 0,
                            EvHP = 0,
                            EvSpecialAttack = 0,
                            EvSpecialDefense = 0,
                            EvSpeed = 0,
                            HP = 76,
                            Level = 50,
                            Name = "Infernape",
                            PlayerId = 1,
                            SpecialAttack = 104,
                            SpecialDefense = 71,
                            Speed = 108,
                            TeamId = 2,
                            Type1 = 2,
                            Type2 = 7
                        },
                        new
                        {
                            Id = 4,
                            AbilityId = 3,
                            Attack = 130,
                            BaseAttack = 130,
                            BaseDefense = 100,
                            BaseHP = 70,
                            BaseSpecialAttack = 55,
                            BaseSpecialDefense = 80,
                            BaseSpeed = 65,
                            Defense = 100,
                            EvAttack = 0,
                            EvDefence = 0,
                            EvHP = 0,
                            EvSpecialAttack = 0,
                            EvSpecialDefense = 0,
                            EvSpeed = 0,
                            HP = 70,
                            Level = 50,
                            Name = "Scizor",
                            PlayerId = 1,
                            SpecialAttack = 55,
                            SpecialDefense = 80,
                            Speed = 65,
                            TeamId = 2,
                            Type1 = 12,
                            Type2 = 17
                        },
                        new
                        {
                            Id = 3,
                            AbilityId = 4,
                            Attack = 134,
                            BaseAttack = 134,
                            BaseDefense = 110,
                            BaseHP = 100,
                            BaseSpecialAttack = 95,
                            BaseSpecialDefense = 100,
                            BaseSpeed = 61,
                            Defense = 110,
                            EvAttack = 0,
                            EvDefence = 0,
                            EvHP = 0,
                            EvSpecialAttack = 0,
                            EvSpecialDefense = 0,
                            EvSpeed = 0,
                            HP = 100,
                            Level = 50,
                            Name = "Tyranitar",
                            PlayerId = 1,
                            SpecialAttack = 95,
                            SpecialDefense = 100,
                            Speed = 61,
                            TeamId = 1,
                            Type1 = 13,
                            Type2 = 16
                        });
                });

            modelBuilder.Entity("PokemonFinalProjectNet6.Infrastructure.Data.Models.PokemonMove", b =>
                {
                    b.Property<int>("PokemonId")
                        .HasColumnType("int");

                    b.Property<int>("MoveId")
                        .HasColumnType("int");

                    b.HasKey("PokemonId", "MoveId");

                    b.HasIndex("MoveId");

                    b.ToTable("PokemonsMoves");

                    b.HasData(
                        new
                        {
                            PokemonId = 1,
                            MoveId = 13
                        },
                        new
                        {
                            PokemonId = 1,
                            MoveId = 3
                        },
                        new
                        {
                            PokemonId = 1,
                            MoveId = 4
                        },
                        new
                        {
                            PokemonId = 1,
                            MoveId = 19
                        },
                        new
                        {
                            PokemonId = 2,
                            MoveId = 17
                        },
                        new
                        {
                            PokemonId = 2,
                            MoveId = 10
                        },
                        new
                        {
                            PokemonId = 2,
                            MoveId = 2
                        },
                        new
                        {
                            PokemonId = 2,
                            MoveId = 9
                        },
                        new
                        {
                            PokemonId = 3,
                            MoveId = 6
                        },
                        new
                        {
                            PokemonId = 3,
                            MoveId = 15
                        },
                        new
                        {
                            PokemonId = 3,
                            MoveId = 14
                        },
                        new
                        {
                            PokemonId = 3,
                            MoveId = 16
                        },
                        new
                        {
                            PokemonId = 4,
                            MoveId = 11
                        },
                        new
                        {
                            PokemonId = 4,
                            MoveId = 8
                        },
                        new
                        {
                            PokemonId = 4,
                            MoveId = 12
                        },
                        new
                        {
                            PokemonId = 4,
                            MoveId = 7
                        },
                        new
                        {
                            PokemonId = 6,
                            MoveId = 20
                        },
                        new
                        {
                            PokemonId = 6,
                            MoveId = 3
                        },
                        new
                        {
                            PokemonId = 6,
                            MoveId = 21
                        },
                        new
                        {
                            PokemonId = 6,
                            MoveId = 4
                        },
                        new
                        {
                            PokemonId = 5,
                            MoveId = 1
                        },
                        new
                        {
                            PokemonId = 5,
                            MoveId = 10
                        },
                        new
                        {
                            PokemonId = 5,
                            MoveId = 6
                        },
                        new
                        {
                            PokemonId = 5,
                            MoveId = 9
                        });
                });

            modelBuilder.Entity("PokemonFinalProjectNet6.Infrastructure.Data.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("LobbyId")
                        .HasColumnType("int");

                    b.Property<int>("Losses")
                        .HasColumnType("int")
                        .HasComment("Number of Losses");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int")
                        .HasComment("User Identifier");

                    b.Property<int>("Wins")
                        .HasColumnType("int")
                        .HasComment("Number of Wins");

                    b.HasKey("Id");

                    b.HasIndex("LobbyId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Losses = 5,
                            Name = "Team1",
                            PlayerId = 1,
                            Wins = 10
                        },
                        new
                        {
                            Id = 2,
                            Losses = 0,
                            Name = "Team2",
                            PlayerId = 1,
                            Wins = 100
                        },
                        new
                        {
                            Id = 3,
                            Losses = 0,
                            Name = "AdminTeamForSpeciesAddition",
                            PlayerId = 2,
                            Wins = 1000
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokemonFinalProjectNet6.Infrastructure.Data.Models.Player", b =>
                {
                    b.HasOne("PokemonFinalProjectNet6.Infrastructure.Data.Models.Lobby", "Lobby")
                        .WithMany("Players")
                        .HasForeignKey("LobbyId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lobby");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PokemonFinalProjectNet6.Infrastructure.Data.Models.Pokemon", b =>
                {
                    b.HasOne("PokemonFinalProjectNet6.Infrastructure.Data.Models.Ability", "Ability")
                        .WithMany()
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonFinalProjectNet6.Infrastructure.Data.Models.Player", "Player")
                        .WithMany("Pokemon")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonFinalProjectNet6.Infrastructure.Data.Models.Team", "Team")
                        .WithMany("Pokemons")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("PokemonFinalProjectNet6.Infrastructure.Data.Models.PokemonMove", b =>
                {
                    b.HasOne("PokemonFinalProjectNet6.Infrastructure.Data.Models.Move", "Move")
                        .WithMany("PokemonMoves")
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonFinalProjectNet6.Infrastructure.Data.Models.Pokemon", "Pokemon")
                        .WithMany("PokemonMoves")
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Move");

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("PokemonFinalProjectNet6.Infrastructure.Data.Models.Team", b =>
                {
                    b.HasOne("PokemonFinalProjectNet6.Infrastructure.Data.Models.Lobby", "Lobby")
                        .WithMany("Teams")
                        .HasForeignKey("LobbyId");

                    b.HasOne("PokemonFinalProjectNet6.Infrastructure.Data.Models.Player", "Player")
                        .WithMany("Teams")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lobby");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("PokemonFinalProjectNet6.Infrastructure.Data.Models.Lobby", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("PokemonFinalProjectNet6.Infrastructure.Data.Models.Move", b =>
                {
                    b.Navigation("PokemonMoves");
                });

            modelBuilder.Entity("PokemonFinalProjectNet6.Infrastructure.Data.Models.Player", b =>
                {
                    b.Navigation("Pokemon");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("PokemonFinalProjectNet6.Infrastructure.Data.Models.Pokemon", b =>
                {
                    b.Navigation("PokemonMoves");
                });

            modelBuilder.Entity("PokemonFinalProjectNet6.Infrastructure.Data.Models.Team", b =>
                {
                    b.Navigation("Pokemons");
                });
#pragma warning restore 612, 618
        }
    }
}
