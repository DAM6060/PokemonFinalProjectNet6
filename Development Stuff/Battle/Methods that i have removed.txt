IAbilityService
Task<AbilityServiceModel> AbilityByIdAsync(int id);

AbilityService
public async Task<AbilityServiceModel> AbilityByIdAsync(int id)
{
    return await repository.AllAsReadOnly<Ability>()
        .Where(m => m.Id == id)
        .Select(m => new AbilityServiceModel
        {
            Id = m.Id,
            Name = m.Name,
            Description = m.Description
        })
        .FirstOrDefaultAsync();
}

IPlayerService
Task<bool> UserHasTeamsAsync(string userId);
public async Task<Player> GetPlayerByPlayerIdAsync(int playerId)
{
	return await repository.AllAsReadOnly<Player>()
		.FirstOrDefaultAsync(p => p.Id == playerId);
}
Task<Player> GetPlayerByPlayerIdAsync(int playerId);
public async Task<PlayerTeamsServiceModel> GetTeamsByPlayerIdForBattleAsync(int playerId)
{
    var teams = await repository.AllAsReadOnly<Team>()
        .Where(t => t.PlayerId == playerId)
        .Select(t => new TeamServiceModel
        {
            Id = t.Id,
            Name = t.Name,
            PlayerId = t.PlayerId,
            Pokemons = t.Pokemons.Select(p => p.Name).ToList(),
            Wins = t.Wins,
            Losses = t.Losses
        }).ToListAsync();

    return new PlayerTeamsServiceModel
    {
		Teams = teams
	};
}

ITeamServiceModel
Task<BattleTeamServiceModel?> GetBattleTeamServiceByIdAsync(int teamId);
public async Task<BattleTeamServiceModel?> GetBattleTeamServiceByIdAsync(int teamId)
{
	return await repository.AllAsReadOnly<Team>()
		.Where(t => t.Id == teamId)
		.Select(t => new BattleTeamServiceModel
        {
			Id = t.Id,
			Name = t.Name,
			PlayerId = t.PlayerId,
            Wins = t.Wins,
            Losses = t.Losses,
			Pokemons = t.Pokemons.Select(p => new BattlePokemonServiceModel
            {
				Id = p.Id,
				Name = p.Name,
                Level = p.Level,
				Health = p.HP,
				Attack = p.Attack,
				Defense = p.Defense,
				SpecialAttack = p.SpecialAttack,
				SpecialDefense = p.SpecialDefense,
				Speed = p.Speed,
				Moves = p.PokemonMoves.Select(pm => new BattleMoveServiceModel
                {
					Id = pm.MoveId,
					Name = pm.Move.Name,
					Power = pm.Move.Power,
					Accuracy = pm.Move.Accuracy,
					PP = pm.Move.PowerPoints,
					Type = (PokemonTypeCustom)Enum.Parse(typeof(PokemonTypeCustom), pm.Move.Type),
                    EffectChance = pm.Move.EffectChance,
                    Effect = pm.Move.Effect,
                    EffectDuration = pm.Move.EffectDuration,
                    Ailment = pm.Move.Ailment,
                    AilmentChance = pm.Move.AilmentChance,
                    DamageClass = pm.Move.DamageClass,
                    IsEffectUser = pm.Move.IsEffectUser,
                    HealAmount = pm.Move.HealAmount,
                    HealType = pm.Move.HealType,
                    Priority = pm.Move.Priority
                }).ToList(),
                Ability = new BattleAbilityServiceModel
                {
					Id = p.AbilityId,
					Name = p.Ability.Name,
					PhaseOfCombatAbilityActivation = p.Ability.PhaseOfCombatActivaton,
                    Description = p.Ability.Description
				},
                Type1 = p.Type1,
                Type2 = p.Type2,
                IsFainted = false
			}).ToList()
		}).FirstOrDefaultAsync();
}
Task<Team> GetTeamByTeamIdAsync(int teamId);
public Task<Team> GetTeamByTeamIdAsync(int teamId)
{
	throw new NotImplementedException();
}
Task<IEnumerable<TeamServiceModel>> GetTeamsByPlayerIdForBattleAsync(int playerId);
public async Task<IEnumerable<TeamServiceModel>> GetTeamsByPlayerIdForBattleAsync(int playerId)
{
	return await repository.AllAsReadOnly<Team>()
		.Where(t => t.PlayerId == playerId)
		.Select(t => new TeamServiceModel
        {
			Id = t.Id,
			Name = t.Name,
			PlayerId = t.PlayerId,
			Pokemons = t.Pokemons.Select(p => p.Name).ToList(),
            Wins = t.Wins,
            Losses = t.Losses
		}).ToListAsync();
}